"""
    Pterodactyl v1 API Reference

    Welcome to the Pterodactyl v1 API documentation. This documentation is unofficial and provided by Dashflo.  If you find any errors throughout this API reference, please [let us know](https://dashflo.net/tickets/new). A special thanks to everyone who has helped contribute!  **The legacy Pterodactyl v0.7 API documentation [can be found here](https://dashflo.net/docs/api/pterodactyl/v0.7/).** Please remember you should not be using v0.7, and should upgrade as soon as possible.  Pterodactyl Links: **[Website](https://pterodactyl.io/)** | **[GitHub](https://github.com/pterodactyl)** | **[Discord](https://discord.gg/pterodactyl)**  <!-- # API Wrappers/SDKs These wrappers can help save time while working with the API in your programming language of choice.  - [Ptero4J](https://github.com/stanjg/Ptero4J) (Java) - [Pterodactyl4J](https://github.com/mattmalec/Pterodactyl4J) (Java) - [crocgodyl](https://github.com/parkervcp/crocgodyl) (Golang) - [Nodeactyl](https://github.com/Burchard36/Nodeactyl) (Node.js) - [pterodactyl-sdk](https://github.com/hcgcloud/pterodactyl-sdk) (PHP) - [Sharpdactyl](https://github.com/KadePcGames/Sharpdactyl) (C#) - [Pydactyl](https://github.com/iamkubi/pydactyl) (Python) - [aiodactyl](https://github.com/WardPearce/aiodactyl) (Python)  If you are a developer of a Pterodactyl API wrapper that's not listed here, feel free to [contact us](https://dashflo.net/tickets/new) and we can add your API wrapper/SDK to the list. -->  # Authentication A user can generate an client API key from: https://pterodactyl.app/account/api An admin can generate an application API key from: https://pterodactyl.app/admin/api  API keys are entered as bearer tokens with all API requests. Here is an example CURL request:  ``` curl \"<endpoint>\"   -H \"Authorization: Bearer <API-Key>\"   -H \"Content-Type: application/json\" \\   -H \"Accept: Application/vnd.pterodactyl.v1+json\" \\ ```  # Ratelimits 240 requests can be made each minute. Headers are returned to show thelimit, and how many are used within minute. ``` x-ratelimit-limit: 240 x-ratelimit-remaining: 237 ```  # Docs Guide Some API routes require data input, or have additional information that can be provided. The route will include table(s) with the available parameters.   | Name                 | Description       | |----------------------|-------------------| | Include parameters   | List of parameters that can be used after adding `?include=<parameters>,<more-parameters>` to the route | | Available parameters | List of all the different parameters available such as `?example=something&example2=something` | | Filters | Filter the data to only include certain information `?filter[uuid]=something` | | Sort by | Sort the returned results `?sort=-id`. Add a `-` before the sort type to reverse the order | | Fields               | Data input fields |  You can combine multiple filters, it'll look for all matching results. For example, you could add &filter[uuid]=3387 and then it'll only return test@example.com.  ** ** [![Dashflo](https://cdn.dashflo.net/promotions/banners/service/minecraft/7u54t2qnuu8qTRv4.png?cache300620192021 =100%x100% \"Dashflo\")](https://dashflo.net/store/dedicated-servers)  # noqa: E501

    The version of the OpenAPI document: 1.0
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from pterodactyl_client.api_client import ApiClient, Endpoint as _Endpoint
from pterodactyl_client.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types
)


class EggsManagementApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client
        self.application_nestsnest_id_eggs_get_endpoint = _Endpoint(
            settings={
                'response_type': (bool, date, datetime, dict, float, int, list, str, none_type,),
                'auth': [
                    'bearer'
                ],
                'endpoint_path': '/application/nests/{nest_id}/eggs',
                'operation_id': 'application_nestsnest_id_eggs_get',
                'http_method': 'GET',
                'servers': [
                    {
                        'url': "https://pterodactyl.file.properties/api",
                        'description': "No description provided",
                    },
                ]
            },
            params_map={
                'all': [
                    'accept',
                    'content_type',
                    'nest_id',
                    'include',
                ],
                'required': [
                    'accept',
                    'content_type',
                    'nest_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'accept':
                        (str,),
                    'content_type':
                        (str,),
                    'nest_id':
                        (int,),
                    'include':
                        (str,),
                },
                'attribute_map': {
                    'accept': 'Accept',
                    'content_type': 'Content-Type',
                    'nest_id': 'nest_id',
                    'include': 'include',
                },
                'location_map': {
                    'accept': 'header',
                    'content_type': 'header',
                    'nest_id': 'path',
                    'include': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'text/plain'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.application_nestsnest_id_eggsegg_id_get_endpoint = _Endpoint(
            settings={
                'response_type': (bool, date, datetime, dict, float, int, list, str, none_type,),
                'auth': [
                    'bearer'
                ],
                'endpoint_path': '/application/nests/{nest_id}/eggs/{egg_id}',
                'operation_id': 'application_nestsnest_id_eggsegg_id_get',
                'http_method': 'GET',
                'servers': [
                    {
                        'url': "https://pterodactyl.file.properties/api",
                        'description': "No description provided",
                    },
                ]
            },
            params_map={
                'all': [
                    'accept',
                    'content_type',
                    'nest_id',
                    'egg_id',
                ],
                'required': [
                    'accept',
                    'content_type',
                    'nest_id',
                    'egg_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'accept':
                        (str,),
                    'content_type':
                        (str,),
                    'nest_id':
                        (int,),
                    'egg_id':
                        (int,),
                },
                'attribute_map': {
                    'accept': 'Accept',
                    'content_type': 'Content-Type',
                    'nest_id': 'nest_id',
                    'egg_id': 'egg_id',
                },
                'location_map': {
                    'accept': 'header',
                    'content_type': 'header',
                    'nest_id': 'path',
                    'egg_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'text/plain'
                ],
                'content_type': [],
            },
            api_client=api_client
        )

    def application_nestsnest_id_eggs_get(
        self,
        accept,
        content_type,
        nest_id,
        **kwargs
    ):
        """[ / ] List eggs  # noqa: E501

        Retrieves a list of eggs  ## Available include parameters | Parameter | Description                                  | |-----------|----------------------------------------------| | nest      | Information about the nest that owns the egg | | servers   | List of servers using the egg                | | config    | Config options of the egg                    | | script    | Egg install script                           | | variables | List of egg variables                        |  <!-- RESPONSE 200 --> {   \"object\": \"list\",   \"data\": [     {       \"object\": \"egg\",       \"attributes\": {         \"id\": 1,         \"uuid\": \"695648dd-01a3-4ced-b075-d4ec4fb9fbf4\",         \"name\": \"Bungeecord\",         \"nest\": 1,         \"author\": \"support@pterodactyl.io\",         \"description\": \"For a long time, Minecraft server owners have had a dream that encompasses a free, easy, and reliable way to connect multiple Minecraft servers together. BungeeCord is the answer to said dream. Whether you are a small server wishing to string multiple game-modes together, or the owner of the ShotBow Network, BungeeCord is the ideal solution for you. With the help of BungeeCord, you will be able to unlock your community's full potential.\",         \"docker_image\": \"quay.io/pterodactyl/core:java\",         \"config\": {           \"files\": {             \"config.yml\": {               \"parser\": \"yaml\",               \"find\": {                 \"listeners[0].query_enabled\": true,                 \"listeners[0].query_port\": \"{{server.build.default.port}}\",                 \"listeners[0].host\": \"0.0.0.0:{{server.build.default.port}}\",                 \"servers.*.address\": {                   \"127.0.0.1\": \"{{config.docker.interface}}\",                   \"localhost\": \"{{config.docker.interface}}\"                 }               }             }           },           \"startup\": {             \"done\": \"Listening on \",             \"userInteraction\": [               \"Listening on /0.0.0.0:25577\"             ]           },           \"stop\": \"end\",           \"logs\": {             \"custom\": false,             \"location\": \"proxy.log.0\"           },           \"extends\": null         },         \"startup\": \"java -Xms128M -Xmx{{SERVER_MEMORY}}M -jar {{SERVER_JARFILE}}\",         \"script\": {           \"privileged\": true,           \"install\": \"#!/bin/ash\\n# Bungeecord Installation Script\\n#\\n# Server Files: /mnt/server\\napk update\\napk add curl\\n\\ncd /mnt/server\\n\\nif [ -z \\\"${BUNGEE_VERSION}\\\" ] || [ \\\"${BUNGEE_VERSION}\\\" == \\\"latest\\\" ]; then\\n    BUNGEE_VERSION=\\\"lastStableBuild\\\"\\nfi\\n\\ncurl -o ${SERVER_JARFILE} https://ci.md-5.net/job/BungeeCord/${BUNGEE_VERSION}/artifact/bootstrap/target/BungeeCord.jar\",           \"entry\": \"ash\",           \"container\": \"alpine:3.9\",           \"extends\": null         },         \"created_at\": \"2019-12-22T04:42:51+00:00\",         \"updated_at\": \"2019-12-22T04:42:51+00:00\",         \"relationships\": {           \"nest\": {             \"object\": \"nest\",             \"attributes\": {               \"id\": 1,               \"uuid\": \"58bde975-ec57-4af2-b241-1426ac6d6d59\",               \"author\": \"support@pterodactyl.io\",               \"name\": \"Minecraft\",               \"description\": \"Minecraft - the classic game from Mojang. With support for Vanilla MC, Spigot, and many others!\",               \"created_at\": \"2019-12-22T04:42:51+00:00\",               \"updated_at\": \"2019-12-22T04:42:51+00:00\"             }           },           \"servers\": {             \"object\": \"list\",             \"data\": []           }         }       }     },     {       \"object\": \"egg\",       \"attributes\": {         \"id\": 2,         \"uuid\": \"7f8736d8-fd99-465f-8c3e-cb4d42c18541\",         \"name\": \"Forge Minecraft\",         \"nest\": 1,         \"author\": \"support@pterodactyl.io\",         \"description\": \"Minecraft Forge Server. Minecraft Forge is a modding API (Application Programming Interface), which makes it easier to create mods, and also make sure mods are compatible with each other.\",         \"docker_image\": \"quay.io/pterodactyl/core:java\",         \"config\": {           \"files\": {             \"server.properties\": {               \"parser\": \"properties\",               \"find\": {                 \"server-ip\": \"0.0.0.0\",                 \"enable-query\": \"true\",                 \"server-port\": \"{{server.build.default.port}}\",                 \"query.port\": \"{{server.build.default.port}}\"               }             }           },           \"startup\": {             \"done\": \")! For help, type \",             \"userInteraction\": [               \"Go to eula.txt for more info.\"             ]           },           \"stop\": \"stop\",           \"logs\": {             \"custom\": false,             \"location\": \"logs/latest.log\"           },           \"extends\": null         },         \"startup\": \"java -Xms128M -Xmx{{SERVER_MEMORY}}M -jar {{SERVER_JARFILE}}\",         \"script\": {           \"privileged\": true,           \"install\": \"#!/bin/bash\\r\\n# Forge Installation Script\\r\\n#\\r\\n# Server Files: /mnt/server\\r\\napt update\\r\\napt install -y curl\\r\\n\\r\\n#Fetching version\\r\\nif [ -z \\\"$MC_VERSION\\\" ] || [ \\\"$MC_VERSION\\\" == \\\"latest\\\" ]; then\\r\\n  echo \\\"Fetching latest\\\"\\r\\n  MC_VERSION=$(curl -sl https://files.minecraftforge.net/maven/net/minecraftforge/forge/index.html | grep -A 2 \\\"Latest\\\" | awk NF=NF RS= OFS=\\\" \\\" | grep -o -e '[1].[0-9]*.[0-9]* - [0-9]*.[0-9]*.[0-9]*.[0-9]*' | sed 's/ //g')\\r\\nelif [[ ! \\\"$MC_VERSION\\\" =~ - ]]; then\\r\\n  echo \\\"Fetching latest from version $MC_VERSION\\\"\\r\\n  MC_VERSION=$(curl -sl https://files.minecraftforge.net/maven/net/minecraftforge/forge/index_$MC_VERSION.html | grep -A 2 \\\"Latest\\\" | awk NF=NF RS= OFS=\\\" \\\" | grep -o -e '[1].[0-9]*.[0-9]* - [0-9]*.[0-9]*.[0-9]*.[0-9]*' | sed 's/ //g')\\r\\nfi\\r\\n\\r\\n#Checking if forge version valid\\r\\nif [[ ! \\\"$MC_VERSION\\\" =~ [1].[0-9]*.[0-9]*-[0-9]*.[0-9]*.[0-9]*.[0-9]* ]]; then\\r\\n    echo \\\"!!! Invalid forge version \\\\\\\"$MC_VERSION\\\\\\\" !!!\\\"\\r\\n    exit\\r\\nfi\\r\\n\\r\\n#Go into main direction\\r\\ncd /mnt/server\\r\\n\\r\\n#Adding .jar when not eding by SERVER_JARFILE\\r\\nif [[ ! $SERVER_JARFILE = *\\\\.jar ]]; then\\r\\n  SERVER_JARFILE=\\\"$SERVER_JARFILE.jar\\\"\\r\\nfi\\r\\n\\r\\n#Downloading jars\\r\\necho -e \\\"Downloading forge version \\\\\\\"$MC_VERSION\\\\\\\"\\\"\\r\\ncurl -o installer.jar -sS https://files.minecraftforge.net/maven/net/minecraftforge/forge/$MC_VERSION/forge-$MC_VERSION-installer.jar\\r\\ncurl -o $SERVER_JARFILE -sS https://files.minecraftforge.net/maven/net/minecraftforge/forge/$MC_VERSION/forge-$MC_VERSION-universal.jar\\r\\n\\r\\n#Checking if downloaded jars exist\\r\\nif [ ! -f ./installer.jar ] || [ ! -f ./$SERVER_JARFILE ]; then\\r\\n    echo \\\"!!! Error by downloading forge version \\\\\\\"$MC_VERSION\\\\\\\" !!!\\\"\\r\\n    exit\\r\\nfi\\r\\n\\r\\n#Installing server\\r\\necho -e \\\"Installing forge server.\\\\n\\\"\\r\\njava -jar installer.jar --installServer\\r\\n\\r\\n#Deleting installer.jar\\r\\necho -e \\\"Deleting installer.jar file.\\\\n\\\"\\r\\nrm -rf installer.jar\",           \"entry\": \"bash\",           \"container\": \"openjdk:8\",           \"extends\": null         },         \"created_at\": \"2019-12-22T04:42:51+00:00\",         \"updated_at\": \"2019-12-22T04:42:51+00:00\",         \"relationships\": {           \"nest\": {             \"object\": \"nest\",             \"attributes\": {               \"id\": 1,               \"uuid\": \"58bde975-ec57-4af2-b241-1426ac6d6d59\",               \"author\": \"support@pterodactyl.io\",               \"name\": \"Minecraft\",               \"description\": \"Minecraft - the classic game from Mojang. With support for Vanilla MC, Spigot, and many others!\",               \"created_at\": \"2019-12-22T04:42:51+00:00\",               \"updated_at\": \"2019-12-22T04:42:51+00:00\"             }           },           \"servers\": {             \"object\": \"list\",             \"data\": []           }         }       }     },     {       \"object\": \"egg\",       \"attributes\": {         \"id\": 3,         \"uuid\": \"2ad75dfd-892d-4441-a452-6d7be7cc895a\",         \"name\": \"Paper\",         \"nest\": 1,         \"author\": \"parker@pterodactyl.io\",         \"description\": \"High performance Spigot fork that aims to fix gameplay and mechanics inconsistencies.\",         \"docker_image\": \"quay.io/pterodactyl/core:java\",         \"config\": {           \"files\": {             \"server.properties\": {               \"parser\": \"properties\",               \"find\": {                 \"server-ip\": \"0.0.0.0\",                 \"server-port\": \"{{server.build.default.port}}\"               }             }           },           \"startup\": {             \"done\": \")! For help, type \",             \"userInteraction\": [               \"Go to eula.txt for more info.\"             ]           },           \"stop\": \"stop\",           \"logs\": [],           \"extends\": null         },         \"startup\": \"java -Xms128M -Xmx{{SERVER_MEMORY}}M -Dterminal.jline=false -Dterminal.ansi=true -jar {{SERVER_JARFILE}}\",         \"script\": {           \"privileged\": true,           \"install\": \"#!/bin/ash\\r\\n# Paper Installation Script\\r\\n#\\r\\n# Server Files: /mnt/server\\r\\napk add --no-cache --update curl jq\\r\\n\\r\\nif [ -n \\\"${DL_PATH}\\\" ]; then\\r\\n    echo -e \\\"using supplied download url\\\"\\r\\n    DOWNLOAD_URL=`eval echo $(echo ${DL_PATH} | sed -e 's/{{/${/g' -e 's/}}/}/g')`\\r\\nelse\\r\\n    VER_EXISTS=`curl -s https://papermc.io/api/v1/paper | jq -r --arg VERSION $MINECRAFT_VERSION '.versions[] | IN($VERSION)' | grep true`\\r\\n    LATEST_PAPER_VERSION=`curl -s https://papermc.io/api/v1/paper | jq -r '.versions' | jq -r '.[0]'`\\r\\n    \\r\\n    if [ \\\"${VER_EXISTS}\\\" == \\\"true\\\" ]; then\\r\\n        echo -e \\\"Version is valid. Using version ${MINECRAFT_VERSION}\\\"\\r\\n    else\\r\\n        echo -e \\\"Using the latest paper version\\\"\\r\\n        MINECRAFT_VERSION=${LATEST_PAPER_VERSION}\\r\\n    fi\\r\\n    \\r\\n    BUILD_EXISTS=`curl -s https://papermc.io/api/v1/paper/${MINECRAFT_VERSION} | jq -r --arg BUILD ${BUILD_NUMBER} '.builds.all[] | IN($BUILD)' | grep true`\\r\\n    LATEST_PAPER_BUILD=`curl -s https://papermc.io/api/v1/paper/${MINECRAFT_VERSION} | jq -r '.builds.latest'`\\r\\n    \\r\\n    if [ \\\"${BUILD_EXISTS}\\\" == \\\"true\\\" ] || [ ${BUILD_NUMBER} == \\\"latest\\\" ]; then\\r\\n        echo -e \\\"Build is valid. Using version ${BUILD_NUMBER}\\\"\\r\\n    else\\r\\n        echo -e \\\"Using the latest paper build\\\"\\r\\n        BUILD_NUMBER=${LATEST_PAPER_BUILD}\\r\\n    fi\\r\\n    \\r\\n    echo \\\"Version being downloaded\\\"\\r\\n    echo -e \\\"MC Version: ${MINECRAFT_VERSION}\\\"\\r\\n    echo -e \\\"Build: ${BUILD_NUMBER}\\\"\\r\\n    DOWNLOAD_URL=https://papermc.io/api/v1/paper/${MINECRAFT_VERSION}/${BUILD_NUMBER}/download \\r\\nfi\\r\\n\\r\\ncd /mnt/server\\r\\n\\r\\necho -e \\\"running curl -o ${SERVER_JARFILE} ${DOWNLOAD_URL}\\\"\\r\\n\\r\\nif [ -f ${SERVER_JARFILE} ]; then\\r\\n    mv ${SERVER_JARFILE} ${SERVER_JARFILE}.old\\r\\nfi\\r\\n\\r\\ncurl -o ${SERVER_JARFILE} ${DOWNLOAD_URL}\\r\\n\\r\\nif [ ! -f server.properties ]; then\\r\\n    echo -e \\\"Downloading MC server.properties\\\"\\r\\n    curl -o server.properties https://raw.githubusercontent.com/parkervcp/eggs/master/minecraft_java/server.properties\\r\\nfi\",           \"entry\": \"ash\",           \"container\": \"alpine:3.9\",           \"extends\": null         },         \"created_at\": \"2019-12-22T04:42:51+00:00\",         \"updated_at\": \"2019-12-22T04:42:51+00:00\",         \"relationships\": {           \"nest\": {             \"object\": \"nest\",             \"attributes\": {               \"id\": 1,               \"uuid\": \"58bde975-ec57-4af2-b241-1426ac6d6d59\",               \"author\": \"support@pterodactyl.io\",               \"name\": \"Minecraft\",               \"description\": \"Minecraft - the classic game from Mojang. With support for Vanilla MC, Spigot, and many others!\",               \"created_at\": \"2019-12-22T04:42:51+00:00\",               \"updated_at\": \"2019-12-22T04:42:51+00:00\"             }           },           \"servers\": {             \"object\": \"list\",             \"data\": []           }         }       }     },     {       \"object\": \"egg\",       \"attributes\": {         \"id\": 4,         \"uuid\": \"00274063-5d21-439f-80b9-c4cc0dba8188\",         \"name\": \"Sponge (SpongeVanilla)\",         \"nest\": 1,         \"author\": \"support@pterodactyl.io\",         \"description\": \"SpongeVanilla is the SpongeAPI implementation for Vanilla Minecraft.\",         \"docker_image\": \"quay.io/pterodactyl/core:java-glibc\",         \"config\": {           \"files\": {             \"server.properties\": {               \"parser\": \"properties\",               \"find\": {                 \"server-ip\": \"0.0.0.0\",                 \"enable-query\": \"true\",                 \"server-port\": \"{{server.build.default.port}}\",                 \"query.port\": \"{{server.build.default.port}}\"               }             }           },           \"startup\": {             \"done\": \")! For help, type \",             \"userInteraction\": [               \"Go to eula.txt for more info.\"             ]           },           \"stop\": \"stop\",           \"logs\": {             \"custom\": false,             \"location\": \"logs/latest.log\"           },           \"extends\": null         },         \"startup\": \"java -Xms128M -Xmx{{SERVER_MEMORY}}M -jar {{SERVER_JARFILE}}\",         \"script\": {           \"privileged\": true,           \"install\": \"#!/bin/ash\\n# Sponge Installation Script\\n#\\n# Server Files: /mnt/server\\n\\napk update\\napk add curl\\n\\ncd /mnt/server\\n\\ncurl -sSL \\\"https://repo.spongepowered.org/maven/org/spongepowered/spongevanilla/${SPONGE_VERSION}/spongevanilla-${SPONGE_VERSION}.jar\\\" -o ${SERVER_JARFILE}\",           \"entry\": \"ash\",           \"container\": \"alpine:3.9\",           \"extends\": null         },         \"created_at\": \"2019-12-22T04:42:51+00:00\",         \"updated_at\": \"2019-12-22T04:42:51+00:00\",         \"relationships\": {           \"nest\": {             \"object\": \"nest\",             \"attributes\": {               \"id\": 1,               \"uuid\": \"58bde975-ec57-4af2-b241-1426ac6d6d59\",               \"author\": \"support@pterodactyl.io\",               \"name\": \"Minecraft\",               \"description\": \"Minecraft - the classic game from Mojang. With support for Vanilla MC, Spigot, and many others!\",               \"created_at\": \"2019-12-22T04:42:51+00:00\",               \"updated_at\": \"2019-12-22T04:42:51+00:00\"             }           },           \"servers\": {             \"object\": \"list\",             \"data\": []           }         }       }     },     {       \"object\": \"egg\",       \"attributes\": {         \"id\": 5,         \"uuid\": \"cd4cc5cf-de80-4a50-b458-dbd7d3193175\",         \"name\": \"Vanilla Minecraft\",         \"nest\": 1,         \"author\": \"support@pterodactyl.io\",         \"description\": \"Minecraft is a game about placing blocks and going on adventures. Explore randomly generated worlds and build amazing things from the simplest of homes to the grandest of castles. Play in Creative Mode with unlimited resources or mine deep in Survival Mode, crafting weapons and armor to fend off dangerous mobs. Do all this alone or with friends.\",         \"docker_image\": \"quay.io/pterodactyl/core:java\",         \"config\": {           \"files\": {             \"server.properties\": {               \"parser\": \"properties\",               \"find\": {                 \"server-ip\": \"0.0.0.0\",                 \"enable-query\": \"true\",                 \"server-port\": \"{{server.build.default.port}}\",                 \"query.port\": \"{{server.build.default.port}}\"               }             }           },           \"startup\": {             \"done\": \")! For help, type \",             \"userInteraction\": [               \"Go to eula.txt for more info.\"             ]           },           \"stop\": \"stop\",           \"logs\": {             \"custom\": false,             \"location\": \"logs/latest.log\"           },           \"extends\": null         },         \"startup\": \"java -Xms128M -Xmx{{SERVER_MEMORY}}M -jar {{SERVER_JARFILE}}\",         \"script\": {           \"privileged\": true,           \"install\": \"#!/bin/ash\\r\\n# Vanilla MC Installation Script\\r\\n#\\r\\n# Server Files: /mnt/server\\r\\napk update\\r\\napk add curl jq\\r\\n\\r\\ncd /mnt/server\\r\\n\\r\\nLATEST_VERSION=`curl https://launchermeta.mojang.com/mc/game/version_manifest.json | jq -r '.latest.release'`\\r\\n\\r\\nif [ -z \\\"$VANILLA_VERSION\\\" ] || [ \\\"$VANILLA_VERSION\\\" == \\\"latest\\\" ]; then\\r\\n  MANIFEST_URL=$(curl https://launchermeta.mojang.com/mc/game/version_manifest.json | jq .versions | jq -r '.[] | select(.id == \\\"'$LATEST_VERSION'\\\") | .url')\\r\\nelse\\r\\n  MANIFEST_URL=$(curl https://launchermeta.mojang.com/mc/game/version_manifest.json | jq .versions | jq -r '.[] | select(.id == \\\"'$VANILLA_VERSION'\\\") | .url')\\r\\nfi\\r\\n\\r\\nDOWNLOAD_URL=`curl $MANIFEST_URL | jq .downloads.server | jq -r '. | .url'`\\r\\n\\r\\ncurl -o ${SERVER_JARFILE} $DOWNLOAD_URL\",           \"entry\": \"ash\",           \"container\": \"alpine:3.9\",           \"extends\": null         },         \"created_at\": \"2019-12-22T04:42:51+00:00\",         \"updated_at\": \"2019-12-22T04:42:51+00:00\",         \"relationships\": {           \"nest\": {             \"object\": \"nest\",             \"attributes\": {               \"id\": 1,               \"uuid\": \"58bde975-ec57-4af2-b241-1426ac6d6d59\",               \"author\": \"support@pterodactyl.io\",               \"name\": \"Minecraft\",               \"description\": \"Minecraft - the classic game from Mojang. With support for Vanilla MC, Spigot, and many others!\",               \"created_at\": \"2019-12-22T04:42:51+00:00\",               \"updated_at\": \"2019-12-22T04:42:51+00:00\"             }           },           \"servers\": {             \"object\": \"list\",             \"data\": [               {                 \"object\": \"server\",                 \"attributes\": {                   \"id\": 5,                   \"external_id\": \"RemoteId1\",                   \"uuid\": \"{server_id}-259b-452e-8b4e-cecc464142ca\",                   \"identifier\": \"{server_id}\",                   \"name\": \"Wuhu Island\",                   \"description\": \"Matt from Wii Sports\",                   \"suspended\": false,                   \"limits\": {                     \"memory\": 512,                     \"swap\": 0,                     \"disk\": 200,                     \"io\": 500,                     \"cpu\": 0,                     \"threads\": null                   },                   \"feature_limits\": {                     \"databases\": 5,                     \"allocations\": 5,                     \"backups\": 2                   },                   \"user\": 1,                   \"node\": 1,                   \"allocation\": 1,                   \"nest\": 1,                   \"egg\": 5,                   \"pack\": null,                   \"container\": {                     \"startup_command\": \"java -Xms128M -Xmx{{SERVER_MEMORY}}M -jar {{SERVER_JARFILE}}\",                     \"image\": \"quay.io/pterodactyl/core:java\",                     \"installed\": true,                     \"environment\": {                       \"SERVER_JARFILE\": \"server.jar\",                       \"VANILLA_VERSION\": \"latest\",                       \"STARTUP\": \"java -Xms128M -Xmx{{SERVER_MEMORY}}M -jar {{SERVER_JARFILE}}\",                       \"P_SERVER_LOCATION\": \"Test\",                       \"P_SERVER_UUID\": \"{server_id}-259b-452e-8b4e-cecc464142ca\"                     }                   },                   \"updated_at\": \"2020-06-13T04:20:53+00:00\",                   \"created_at\": \"2019-12-23T06:46:27+00:00\"                 }               }             ]           }         }       }     }   ] } <!-- ENDRESPONSE -->  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.application_nestsnest_id_eggs_get(accept, content_type, nest_id, async_req=True)
        >>> result = thread.get()

        Args:
            accept (str): 
            content_type (str): 
            nest_id (int): 

        Keyword Args:
            include (str): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            bool, date, datetime, dict, float, int, list, str, none_type
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['accept'] = \
            accept
        kwargs['content_type'] = \
            content_type
        kwargs['nest_id'] = \
            nest_id
        return self.application_nestsnest_id_eggs_get_endpoint.call_with_http_info(**kwargs)

    def application_nestsnest_id_eggsegg_id_get(
        self,
        accept,
        content_type,
        nest_id,
        egg_id,
        **kwargs
    ):
        """[ /{egg} ] Egg details  # noqa: E501

        Retrieves the specified egg  ## Available include parameters | Parameter | Description                                  | |-----------|----------------------------------------------| | nest      | Information about the nest that owns the egg | | servers   | List of servers using the egg                | | config    | Config options of the egg                    | | script    | Egg install script                           | | variables | List of egg variables                        |  <!-- RESPONSE 200 --> {   \"object\": \"egg\",   \"attributes\": {     \"id\": 1,     \"uuid\": \"695648dd-01a3-4ced-b075-d4ec4fb9fbf4\",     \"name\": \"Bungeecord\",     \"nest\": 1,     \"author\": \"support@pterodactyl.io\",     \"description\": \"For a long time, Minecraft server owners have had a dream that encompasses a free, easy, and reliable way to connect multiple Minecraft servers together. BungeeCord is the answer to said dream. Whether you are a small server wishing to string multiple game-modes together, or the owner of the ShotBow Network, BungeeCord is the ideal solution for you. With the help of BungeeCord, you will be able to unlock your community's full potential.\",     \"docker_image\": \"quay.io/pterodactyl/core:java\",     \"config\": {       \"files\": {         \"config.yml\": {           \"parser\": \"yaml\",           \"find\": {             \"listeners[0].query_enabled\": true,             \"listeners[0].query_port\": \"{{server.build.default.port}}\",             \"listeners[0].host\": \"0.0.0.0:{{server.build.default.port}}\",             \"servers.*.address\": {               \"127.0.0.1\": \"{{config.docker.interface}}\",               \"localhost\": \"{{config.docker.interface}}\"             }           }         }       },       \"startup\": {         \"done\": \"Listening on \",         \"userInteraction\": [           \"Listening on /0.0.0.0:25577\"         ]       },       \"stop\": \"end\",       \"logs\": {         \"custom\": false,         \"location\": \"proxy.log.0\"       },       \"extends\": null     },     \"startup\": \"java -Xms128M -Xmx{{SERVER_MEMORY}}M -jar {{SERVER_JARFILE}}\",     \"script\": {       \"privileged\": true,       \"install\": \"#!/bin/ash\\n# Bungeecord Installation Script\\n#\\n# Server Files: /mnt/server\\napk update\\napk add curl\\n\\ncd /mnt/server\\n\\nif [ -z \\\"${BUNGEE_VERSION}\\\" ] || [ \\\"${BUNGEE_VERSION}\\\" == \\\"latest\\\" ]; then\\n    BUNGEE_VERSION=\\\"lastStableBuild\\\"\\nfi\\n\\ncurl -o ${SERVER_JARFILE} https://ci.md-5.net/job/BungeeCord/${BUNGEE_VERSION}/artifact/bootstrap/target/BungeeCord.jar\",       \"entry\": \"ash\",       \"container\": \"alpine:3.9\",       \"extends\": null     },     \"created_at\": \"2019-12-22T04:42:51+00:00\",     \"updated_at\": \"2019-12-22T04:42:51+00:00\"   } } <!-- ENDRESPONSE -->  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.application_nestsnest_id_eggsegg_id_get(accept, content_type, nest_id, egg_id, async_req=True)
        >>> result = thread.get()

        Args:
            accept (str): 
            content_type (str): 
            nest_id (int): 
            egg_id (int): 

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            bool, date, datetime, dict, float, int, list, str, none_type
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['accept'] = \
            accept
        kwargs['content_type'] = \
            content_type
        kwargs['nest_id'] = \
            nest_id
        kwargs['egg_id'] = \
            egg_id
        return self.application_nestsnest_id_eggsegg_id_get_endpoint.call_with_http_info(**kwargs)

