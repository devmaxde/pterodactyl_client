"""
    Pterodactyl v1 API Reference

    Welcome to the Pterodactyl v1 API documentation. This documentation is unofficial and provided by Dashflo.  If you find any errors throughout this API reference, please [let us know](https://dashflo.net/tickets/new). A special thanks to everyone who has helped contribute!  **The legacy Pterodactyl v0.7 API documentation [can be found here](https://dashflo.net/docs/api/pterodactyl/v0.7/).** Please remember you should not be using v0.7, and should upgrade as soon as possible.  Pterodactyl Links: **[Website](https://pterodactyl.io/)** | **[GitHub](https://github.com/pterodactyl)** | **[Discord](https://discord.gg/pterodactyl)**  <!-- # API Wrappers/SDKs These wrappers can help save time while working with the API in your programming language of choice.  - [Ptero4J](https://github.com/stanjg/Ptero4J) (Java) - [Pterodactyl4J](https://github.com/mattmalec/Pterodactyl4J) (Java) - [crocgodyl](https://github.com/parkervcp/crocgodyl) (Golang) - [Nodeactyl](https://github.com/Burchard36/Nodeactyl) (Node.js) - [pterodactyl-sdk](https://github.com/hcgcloud/pterodactyl-sdk) (PHP) - [Sharpdactyl](https://github.com/KadePcGames/Sharpdactyl) (C#) - [Pydactyl](https://github.com/iamkubi/pydactyl) (Python) - [aiodactyl](https://github.com/WardPearce/aiodactyl) (Python)  If you are a developer of a Pterodactyl API wrapper that's not listed here, feel free to [contact us](https://dashflo.net/tickets/new) and we can add your API wrapper/SDK to the list. -->  # Authentication A user can generate an client API key from: https://pterodactyl.app/account/api An admin can generate an application API key from: https://pterodactyl.app/admin/api  API keys are entered as bearer tokens with all API requests. Here is an example CURL request:  ``` curl \"<endpoint>\"   -H \"Authorization: Bearer <API-Key>\"   -H \"Content-Type: application/json\" \\   -H \"Accept: Application/vnd.pterodactyl.v1+json\" \\ ```  # Ratelimits 240 requests can be made each minute. Headers are returned to show thelimit, and how many are used within minute. ``` x-ratelimit-limit: 240 x-ratelimit-remaining: 237 ```  # Docs Guide Some API routes require data input, or have additional information that can be provided. The route will include table(s) with the available parameters.   | Name                 | Description       | |----------------------|-------------------| | Include parameters   | List of parameters that can be used after adding `?include=<parameters>,<more-parameters>` to the route | | Available parameters | List of all the different parameters available such as `?example=something&example2=something` | | Filters | Filter the data to only include certain information `?filter[uuid]=something` | | Sort by | Sort the returned results `?sort=-id`. Add a `-` before the sort type to reverse the order | | Fields               | Data input fields |  You can combine multiple filters, it'll look for all matching results. For example, you could add &filter[uuid]=3387 and then it'll only return test@example.com.  ** ** [![Dashflo](https://cdn.dashflo.net/promotions/banners/service/minecraft/7u54t2qnuu8qTRv4.png?cache300620192021 =100%x100% \"Dashflo\")](https://dashflo.net/store/dedicated-servers)  # noqa: E501

    The version of the OpenAPI document: 1.0
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from pterodactyl_client.api_client import ApiClient, Endpoint as _Endpoint
from pterodactyl_client.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types
)
from pterodactyl_client.model.client_servers_server_id_files_compress_post_request import ClientServersServerIdFilesCompressPostRequest
from pterodactyl_client.model.client_servers_server_id_files_copy_post_request import ClientServersServerIdFilesCopyPostRequest
from pterodactyl_client.model.client_servers_server_id_files_create_folder_post_request import ClientServersServerIdFilesCreateFolderPostRequest
from pterodactyl_client.model.client_servers_server_id_files_decompress_post_request import ClientServersServerIdFilesDecompressPostRequest
from pterodactyl_client.model.client_servers_server_id_files_delete_post_request import ClientServersServerIdFilesDeletePostRequest
from pterodactyl_client.model.client_servers_server_id_files_rename_put_request import ClientServersServerIdFilesRenamePutRequest


class FileManagerApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client
        self.client_serversserver_id_files_compress_post_endpoint = _Endpoint(
            settings={
                'response_type': (bool, date, datetime, dict, float, int, list, str, none_type,),
                'auth': [
                    'bearer'
                ],
                'endpoint_path': '/client/servers/{server_id}/files/compress',
                'operation_id': 'client_serversserver_id_files_compress_post',
                'http_method': 'POST',
                'servers': [
                    {
                        'url': "https://pterodactyl.file.properties/api",
                        'description': "No description provided",
                    },
                ]
            },
            params_map={
                'all': [
                    'accept',
                    'server_id',
                    'client_servers_server_id_files_compress_post_request',
                ],
                'required': [
                    'accept',
                    'server_id',
                    'client_servers_server_id_files_compress_post_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'accept':
                        (str,),
                    'server_id':
                        (str,),
                    'client_servers_server_id_files_compress_post_request':
                        (ClientServersServerIdFilesCompressPostRequest,),
                },
                'attribute_map': {
                    'accept': 'Accept',
                    'server_id': 'server_id',
                },
                'location_map': {
                    'accept': 'header',
                    'server_id': 'path',
                    'client_servers_server_id_files_compress_post_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'text/plain'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.client_serversserver_id_files_contents_get_endpoint = _Endpoint(
            settings={
                'response_type': (bool, date, datetime, dict, float, int, list, str, none_type,),
                'auth': [
                    'bearer'
                ],
                'endpoint_path': '/client/servers/{server_id}/files/contents',
                'operation_id': 'client_serversserver_id_files_contents_get',
                'http_method': 'GET',
                'servers': [
                    {
                        'url': "https://pterodactyl.file.properties/api",
                        'description': "No description provided",
                    },
                ]
            },
            params_map={
                'all': [
                    'accept',
                    'content_type',
                    'server_id',
                    'file',
                ],
                'required': [
                    'accept',
                    'content_type',
                    'server_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'accept':
                        (str,),
                    'content_type':
                        (str,),
                    'server_id':
                        (str,),
                    'file':
                        (str,),
                },
                'attribute_map': {
                    'accept': 'Accept',
                    'content_type': 'Content-Type',
                    'server_id': 'server_id',
                    'file': 'file',
                },
                'location_map': {
                    'accept': 'header',
                    'content_type': 'header',
                    'server_id': 'path',
                    'file': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'text/plain'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.client_serversserver_id_files_copy_post_endpoint = _Endpoint(
            settings={
                'response_type': (bool, date, datetime, dict, float, int, list, str, none_type,),
                'auth': [
                    'bearer'
                ],
                'endpoint_path': '/client/servers/{server_id}/files/copy',
                'operation_id': 'client_serversserver_id_files_copy_post',
                'http_method': 'POST',
                'servers': [
                    {
                        'url': "https://pterodactyl.file.properties/api",
                        'description': "No description provided",
                    },
                ]
            },
            params_map={
                'all': [
                    'accept',
                    'server_id',
                    'client_servers_server_id_files_copy_post_request',
                ],
                'required': [
                    'accept',
                    'server_id',
                    'client_servers_server_id_files_copy_post_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'accept':
                        (str,),
                    'server_id':
                        (str,),
                    'client_servers_server_id_files_copy_post_request':
                        (ClientServersServerIdFilesCopyPostRequest,),
                },
                'attribute_map': {
                    'accept': 'Accept',
                    'server_id': 'server_id',
                },
                'location_map': {
                    'accept': 'header',
                    'server_id': 'path',
                    'client_servers_server_id_files_copy_post_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'text/plain'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.client_serversserver_id_files_create_folder_post_endpoint = _Endpoint(
            settings={
                'response_type': (bool, date, datetime, dict, float, int, list, str, none_type,),
                'auth': [
                    'bearer'
                ],
                'endpoint_path': '/client/servers/{server_id}/files/create-folder',
                'operation_id': 'client_serversserver_id_files_create_folder_post',
                'http_method': 'POST',
                'servers': [
                    {
                        'url': "https://pterodactyl.file.properties/api",
                        'description': "No description provided",
                    },
                ]
            },
            params_map={
                'all': [
                    'accept',
                    'server_id',
                    'client_servers_server_id_files_create_folder_post_request',
                ],
                'required': [
                    'accept',
                    'server_id',
                    'client_servers_server_id_files_create_folder_post_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'accept':
                        (str,),
                    'server_id':
                        (str,),
                    'client_servers_server_id_files_create_folder_post_request':
                        (ClientServersServerIdFilesCreateFolderPostRequest,),
                },
                'attribute_map': {
                    'accept': 'Accept',
                    'server_id': 'server_id',
                },
                'location_map': {
                    'accept': 'header',
                    'server_id': 'path',
                    'client_servers_server_id_files_create_folder_post_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'text/plain'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.client_serversserver_id_files_decompress_post_endpoint = _Endpoint(
            settings={
                'response_type': (bool, date, datetime, dict, float, int, list, str, none_type,),
                'auth': [
                    'bearer'
                ],
                'endpoint_path': '/client/servers/{server_id}/files/decompress',
                'operation_id': 'client_serversserver_id_files_decompress_post',
                'http_method': 'POST',
                'servers': [
                    {
                        'url': "https://pterodactyl.file.properties/api",
                        'description': "No description provided",
                    },
                ]
            },
            params_map={
                'all': [
                    'accept',
                    'server_id',
                    'client_servers_server_id_files_decompress_post_request',
                ],
                'required': [
                    'accept',
                    'server_id',
                    'client_servers_server_id_files_decompress_post_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'accept':
                        (str,),
                    'server_id':
                        (str,),
                    'client_servers_server_id_files_decompress_post_request':
                        (ClientServersServerIdFilesDecompressPostRequest,),
                },
                'attribute_map': {
                    'accept': 'Accept',
                    'server_id': 'server_id',
                },
                'location_map': {
                    'accept': 'header',
                    'server_id': 'path',
                    'client_servers_server_id_files_decompress_post_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'text/plain'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.client_serversserver_id_files_delete_post_endpoint = _Endpoint(
            settings={
                'response_type': (bool, date, datetime, dict, float, int, list, str, none_type,),
                'auth': [
                    'bearer'
                ],
                'endpoint_path': '/client/servers/{server_id}/files/delete',
                'operation_id': 'client_serversserver_id_files_delete_post',
                'http_method': 'POST',
                'servers': [
                    {
                        'url': "https://pterodactyl.file.properties/api",
                        'description': "No description provided",
                    },
                ]
            },
            params_map={
                'all': [
                    'accept',
                    'server_id',
                    'client_servers_server_id_files_delete_post_request',
                ],
                'required': [
                    'accept',
                    'server_id',
                    'client_servers_server_id_files_delete_post_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'accept':
                        (str,),
                    'server_id':
                        (str,),
                    'client_servers_server_id_files_delete_post_request':
                        (ClientServersServerIdFilesDeletePostRequest,),
                },
                'attribute_map': {
                    'accept': 'Accept',
                    'server_id': 'server_id',
                },
                'location_map': {
                    'accept': 'header',
                    'server_id': 'path',
                    'client_servers_server_id_files_delete_post_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'text/plain'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.client_serversserver_id_files_download_get_endpoint = _Endpoint(
            settings={
                'response_type': (bool, date, datetime, dict, float, int, list, str, none_type,),
                'auth': [
                    'bearer'
                ],
                'endpoint_path': '/client/servers/{server_id}/files/download',
                'operation_id': 'client_serversserver_id_files_download_get',
                'http_method': 'GET',
                'servers': [
                    {
                        'url': "https://pterodactyl.file.properties/api",
                        'description': "No description provided",
                    },
                ]
            },
            params_map={
                'all': [
                    'accept',
                    'content_type',
                    'server_id',
                    'file',
                ],
                'required': [
                    'accept',
                    'content_type',
                    'server_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'accept':
                        (str,),
                    'content_type':
                        (str,),
                    'server_id':
                        (str,),
                    'file':
                        (str,),
                },
                'attribute_map': {
                    'accept': 'Accept',
                    'content_type': 'Content-Type',
                    'server_id': 'server_id',
                    'file': 'file',
                },
                'location_map': {
                    'accept': 'header',
                    'content_type': 'header',
                    'server_id': 'path',
                    'file': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'text/plain'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.client_serversserver_id_files_list_get_endpoint = _Endpoint(
            settings={
                'response_type': (bool, date, datetime, dict, float, int, list, str, none_type,),
                'auth': [
                    'bearer'
                ],
                'endpoint_path': '/client/servers/{server_id}/files/list',
                'operation_id': 'client_serversserver_id_files_list_get',
                'http_method': 'GET',
                'servers': [
                    {
                        'url': "https://pterodactyl.file.properties/api",
                        'description': "No description provided",
                    },
                ]
            },
            params_map={
                'all': [
                    'accept',
                    'content_type',
                    'server_id',
                    'directory',
                ],
                'required': [
                    'accept',
                    'content_type',
                    'server_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'accept':
                        (str,),
                    'content_type':
                        (str,),
                    'server_id':
                        (str,),
                    'directory':
                        (str,),
                },
                'attribute_map': {
                    'accept': 'Accept',
                    'content_type': 'Content-Type',
                    'server_id': 'server_id',
                    'directory': 'directory',
                },
                'location_map': {
                    'accept': 'header',
                    'content_type': 'header',
                    'server_id': 'path',
                    'directory': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'text/plain'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.client_serversserver_id_files_rename_put_endpoint = _Endpoint(
            settings={
                'response_type': (bool, date, datetime, dict, float, int, list, str, none_type,),
                'auth': [
                    'bearer'
                ],
                'endpoint_path': '/client/servers/{server_id}/files/rename',
                'operation_id': 'client_serversserver_id_files_rename_put',
                'http_method': 'PUT',
                'servers': [
                    {
                        'url': "https://pterodactyl.file.properties/api",
                        'description': "No description provided",
                    },
                ]
            },
            params_map={
                'all': [
                    'accept',
                    'server_id',
                    'client_servers_server_id_files_rename_put_request',
                ],
                'required': [
                    'accept',
                    'server_id',
                    'client_servers_server_id_files_rename_put_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'accept':
                        (str,),
                    'server_id':
                        (str,),
                    'client_servers_server_id_files_rename_put_request':
                        (ClientServersServerIdFilesRenamePutRequest,),
                },
                'attribute_map': {
                    'accept': 'Accept',
                    'server_id': 'server_id',
                },
                'location_map': {
                    'accept': 'header',
                    'server_id': 'path',
                    'client_servers_server_id_files_rename_put_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'text/plain'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.client_serversserver_id_files_upload_get_endpoint = _Endpoint(
            settings={
                'response_type': (bool, date, datetime, dict, float, int, list, str, none_type,),
                'auth': [
                    'bearer'
                ],
                'endpoint_path': '/client/servers/{server_id}/files/upload',
                'operation_id': 'client_serversserver_id_files_upload_get',
                'http_method': 'GET',
                'servers': [
                    {
                        'url': "https://pterodactyl.file.properties/api",
                        'description': "No description provided",
                    },
                ]
            },
            params_map={
                'all': [
                    'accept',
                    'content_type',
                    'server_id',
                ],
                'required': [
                    'accept',
                    'content_type',
                    'server_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'accept':
                        (str,),
                    'content_type':
                        (str,),
                    'server_id':
                        (str,),
                },
                'attribute_map': {
                    'accept': 'Accept',
                    'content_type': 'Content-Type',
                    'server_id': 'server_id',
                },
                'location_map': {
                    'accept': 'header',
                    'content_type': 'header',
                    'server_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'text/plain'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.client_serversserver_id_files_write_post_endpoint = _Endpoint(
            settings={
                'response_type': (bool, date, datetime, dict, float, int, list, str, none_type,),
                'auth': [
                    'bearer'
                ],
                'endpoint_path': '/client/servers/{server_id}/files/write',
                'operation_id': 'client_serversserver_id_files_write_post',
                'http_method': 'POST',
                'servers': [
                    {
                        'url': "https://pterodactyl.file.properties/api",
                        'description': "No description provided",
                    },
                ]
            },
            params_map={
                'all': [
                    'accept',
                    'server_id',
                    'body',
                    'file',
                ],
                'required': [
                    'accept',
                    'server_id',
                    'body',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'accept':
                        (str,),
                    'server_id':
                        (str,),
                    'body':
                        (str,),
                    'file':
                        (str,),
                },
                'attribute_map': {
                    'accept': 'Accept',
                    'server_id': 'server_id',
                    'file': 'file',
                },
                'location_map': {
                    'accept': 'header',
                    'server_id': 'path',
                    'body': 'body',
                    'file': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'text/plain'
                ],
                'content_type': [
                    'text/plain'
                ]
            },
            api_client=api_client
        )

    def client_serversserver_id_files_compress_post(
        self,
        accept,
        server_id,
        client_servers_server_id_files_compress_post_request,
        **kwargs
    ):
        """[ /compress ] Compress file  # noqa: E501

        Compresses the specified file  <!-- RESPONSE 200 --> {   \"object\": \"file_object\",   \"attributes\": {     \"name\": \"archive-2020-08-23T220805Z.tar.gz\",     \"mode\": \"-rw-------\",     \"size\": 0,     \"is_file\": true,     \"is_symlink\": false,     \"is_editable\": false,     \"mimetype\": \"application/tar+gzip\",     \"created_at\": \"2020-08-23T22:08:05+00:00\",     \"modified_at\": \"2020-08-23T22:08:05+00:00\"   } } <!-- ENDRESPONSE -->  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.client_serversserver_id_files_compress_post(accept, server_id, client_servers_server_id_files_compress_post_request, async_req=True)
        >>> result = thread.get()

        Args:
            accept (str): 
            server_id (str): 
            client_servers_server_id_files_compress_post_request (ClientServersServerIdFilesCompressPostRequest): 

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            bool, date, datetime, dict, float, int, list, str, none_type
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['accept'] = \
            accept
        kwargs['server_id'] = \
            server_id
        kwargs['client_servers_server_id_files_compress_post_request'] = \
            client_servers_server_id_files_compress_post_request
        return self.client_serversserver_id_files_compress_post_endpoint.call_with_http_info(**kwargs)

    def client_serversserver_id_files_contents_get(
        self,
        accept,
        content_type,
        server_id,
        **kwargs
    ):
        """[ /contents ] Get file contents  # noqa: E501

        Displays the contents of the specified file  ## Available parameters | Parameter | Description                          | |-----------|--------------------------------------| | file      | URL encoded path to the desired file |  <!-- RESPONSE 200 --> # This is the main configuration file for Paper. # As you can see, there's tons to configure. Some options may impact gameplay, so use # with caution, and make sure you know what each option does before configuring. #  # If you need help with the configuration or have any questions related to Paper, # join us in our Discord or IRC channel. #  # Discord: https://paperdiscord.emc.gs # IRC: #paper @ irc.spi.gt ( http://irc.spi.gt/iris/?channels=paper ) # Website: https://papermc.io/  # Docs: https://paper.readthedocs.org/   verbose: false config-version: 20 settings:   load-permissions-yml-before-plugins: true   bungee-online-mode: true   region-file-cache-size: 256   incoming-packet-spam-threshold: 300   save-player-data: true   use-alternative-luck-formula: false   suggest-player-names-when-null-tab-completions: true   enable-player-collisions: true   save-empty-scoreboard-teams: false   velocity-support:     enabled: false     online-mode: false     secret: ''   async-chunks:     enable: true     load-threads: -1   watchdog:     early-warning-every: 5000     early-warning-delay: 10000   spam-limiter:     tab-spam-increment: 1     tab-spam-limit: 500   book-size:     page-max: 2560     total-multiplier: 0.98 messages:   no-permission: '&cI''m sorry, but you do not have permission to perform this command.     Please contact the server administrators if you believe that this is in error.'   kick:     authentication-servers-down: ''     connection-throttle: Connection throttled! Please wait before reconnecting.     flying-player: Flying is not enabled on this server     flying-vehicle: Flying is not enabled on this server timings:   enabled: true   verbose: true   server-name-privacy: false   hidden-config-entries:   - database   - settings.bungeecord-addresses   history-interval: 300   history-length: 3600   server-name: Unknown Server world-settings:   default:     per-player-mob-spawns: false     optimize-explosions: false     portal-search-radius: 128     disable-teleportation-suffocation-check: false     fixed-chunk-inhabited-time: -1     use-vanilla-world-scoreboard-name-coloring: false     remove-corrupt-tile-entities: false     enable-treasure-maps: true     treasure-maps-return-already-discovered: false     experience-merge-max-value: -1     prevent-moving-into-unloaded-chunks: false     max-auto-save-chunks-per-tick: 24     falling-block-height-nerf: 0     tnt-entity-height-nerf: 0     filter-nbt-data-from-spawn-eggs-and-related: true     max-entity-collisions: 8     disable-creeper-lingering-effect: false     duplicate-uuid-resolver: saferegen     duplicate-uuid-saferegen-delete-range: 32     prevent-tnt-from-moving-in-water: false     disable-thunder: false     skeleton-horse-thunder-spawn-chance: 0.01     disable-ice-and-snow: false     count-all-mobs-for-spawning: false     keep-spawn-loaded-range: 10     keep-spawn-loaded: true     auto-save-interval: -1     armor-stands-do-collision-entity-lookups: true     non-player-arrow-despawn-rate: -1     creative-arrow-despawn-rate: -1     nether-ceiling-void-damage-height: 0     grass-spread-tick-rate: 1     water-over-lava-flow-speed: 5     bed-search-radius: 1     fix-zero-tick-instant-grow-farms: true     use-faster-eigencraft-redstone: false     allow-non-player-entities-on-scoreboards: false     disable-explosion-knockback: false     container-update-tick-rate: 1     parrots-are-unaffected-by-player-movement: false     armor-stands-tick: true     spawner-nerfed-mobs-should-jump: false     entities-target-with-follow-range: false     allow-leashing-undead-horse: false     baby-zombie-movement-modifier: 0.5     mob-spawner-tick-rate: 1     all-chunks-are-slime-chunks: false     game-mechanics:       scan-for-legacy-ender-dragon: true       disable-pillager-patrols: false       disable-relative-projectile-velocity: false       disable-chest-cat-detection: false       shield-blocking-delay: 5       disable-end-credits: false       disable-player-crits: false       disable-sprint-interruption-on-attack: false       disable-unloaded-chunk-enderpearl-exploit: true     max-growth-height:       cactus: 3       reeds: 3     fishing-time-range:       MinimumTicks: 100       MaximumTicks: 600     despawn-ranges:       soft: 32       hard: 128     lightning-strike-distance-limit:       sound: -1       impact-sound: -1       flash: -1     frosted-ice:       enabled: true       delay:         min: 20         max: 40     lootables:       auto-replenish: false       restrict-player-reloot: true       reset-seed-on-fill: true       max-refills: -1       refresh-min: 12h       refresh-max: 2d     alt-item-despawn-rate:       enabled: false       items:         COBBLESTONE: 300     hopper:       cooldown-when-full: true       disable-move-event: false     anti-xray:       enabled: false       engine-mode: 1       chunk-edge-mode: 2       max-chunk-section-index: 3       update-radius: 2       hidden-blocks:       - gold_ore       - iron_ore       - coal_ore       - lapis_ore       - mossy_cobblestone       - obsidian       - chest       - diamond_ore       - redstone_ore       - clay       - emerald_ore       - ender_chest       replacement-blocks:       - stone       - oak_planks     generator-settings:       flat-bedrock: false     squid-spawn-height:       maximum: 0.0 <!-- ENDRESPONSE -->   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.client_serversserver_id_files_contents_get(accept, content_type, server_id, async_req=True)
        >>> result = thread.get()

        Args:
            accept (str): 
            content_type (str): 
            server_id (str): 

        Keyword Args:
            file (str): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            bool, date, datetime, dict, float, int, list, str, none_type
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['accept'] = \
            accept
        kwargs['content_type'] = \
            content_type
        kwargs['server_id'] = \
            server_id
        return self.client_serversserver_id_files_contents_get_endpoint.call_with_http_info(**kwargs)

    def client_serversserver_id_files_copy_post(
        self,
        accept,
        server_id,
        client_servers_server_id_files_copy_post_request,
        **kwargs
    ):
        """[ /copy ] Copy file  # noqa: E501

        Copies the specified file  <!-- RESPONSE 204 --> // Successful <!-- ENDRESPONSE -->  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.client_serversserver_id_files_copy_post(accept, server_id, client_servers_server_id_files_copy_post_request, async_req=True)
        >>> result = thread.get()

        Args:
            accept (str): 
            server_id (str): 
            client_servers_server_id_files_copy_post_request (ClientServersServerIdFilesCopyPostRequest): 

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            bool, date, datetime, dict, float, int, list, str, none_type
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['accept'] = \
            accept
        kwargs['server_id'] = \
            server_id
        kwargs['client_servers_server_id_files_copy_post_request'] = \
            client_servers_server_id_files_copy_post_request
        return self.client_serversserver_id_files_copy_post_endpoint.call_with_http_info(**kwargs)

    def client_serversserver_id_files_create_folder_post(
        self,
        accept,
        server_id,
        client_servers_server_id_files_create_folder_post_request,
        **kwargs
    ):
        """[ /create-folder ] Create folder  # noqa: E501

        Creates the specified folder in the specified directory  <!-- RESPONSE 204 --> // Successful <!-- ENDRESPONSE -->  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.client_serversserver_id_files_create_folder_post(accept, server_id, client_servers_server_id_files_create_folder_post_request, async_req=True)
        >>> result = thread.get()

        Args:
            accept (str): 
            server_id (str): 
            client_servers_server_id_files_create_folder_post_request (ClientServersServerIdFilesCreateFolderPostRequest): 

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            bool, date, datetime, dict, float, int, list, str, none_type
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['accept'] = \
            accept
        kwargs['server_id'] = \
            server_id
        kwargs['client_servers_server_id_files_create_folder_post_request'] = \
            client_servers_server_id_files_create_folder_post_request
        return self.client_serversserver_id_files_create_folder_post_endpoint.call_with_http_info(**kwargs)

    def client_serversserver_id_files_decompress_post(
        self,
        accept,
        server_id,
        client_servers_server_id_files_decompress_post_request,
        **kwargs
    ):
        """[ /decompress ] Decompress file  # noqa: E501

        Decompresses the selected file  <!-- RESPONSE 204 --> // Successful <!-- ENDRESPONSE -->  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.client_serversserver_id_files_decompress_post(accept, server_id, client_servers_server_id_files_decompress_post_request, async_req=True)
        >>> result = thread.get()

        Args:
            accept (str): 
            server_id (str): 
            client_servers_server_id_files_decompress_post_request (ClientServersServerIdFilesDecompressPostRequest): 

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            bool, date, datetime, dict, float, int, list, str, none_type
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['accept'] = \
            accept
        kwargs['server_id'] = \
            server_id
        kwargs['client_servers_server_id_files_decompress_post_request'] = \
            client_servers_server_id_files_decompress_post_request
        return self.client_serversserver_id_files_decompress_post_endpoint.call_with_http_info(**kwargs)

    def client_serversserver_id_files_delete_post(
        self,
        accept,
        server_id,
        client_servers_server_id_files_delete_post_request,
        **kwargs
    ):
        """[ /delete] Delete file  # noqa: E501

        Deletes the specified file(s) or folder(s)  <!-- RESPONSE 204 --> // Successful <!-- ENDRESPONSE -->  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.client_serversserver_id_files_delete_post(accept, server_id, client_servers_server_id_files_delete_post_request, async_req=True)
        >>> result = thread.get()

        Args:
            accept (str): 
            server_id (str): 
            client_servers_server_id_files_delete_post_request (ClientServersServerIdFilesDeletePostRequest): 

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            bool, date, datetime, dict, float, int, list, str, none_type
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['accept'] = \
            accept
        kwargs['server_id'] = \
            server_id
        kwargs['client_servers_server_id_files_delete_post_request'] = \
            client_servers_server_id_files_delete_post_request
        return self.client_serversserver_id_files_delete_post_endpoint.call_with_http_info(**kwargs)

    def client_serversserver_id_files_download_get(
        self,
        accept,
        content_type,
        server_id,
        **kwargs
    ):
        """[ /download ] Download file  # noqa: E501

        Generates a one-time link to download the specified file  ## Available parameters | Parameter | Description                  | |-----------|------------------------------| | file      | URL encoded path to the desired file |  <!-- RESPONSE 200 --> {   \"object\": \"signed_url\",   \"attributes\": {     \"url\": \"https://pterodactyl.file.properties:8080/download/file?token=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiIsImp0aSI6IjdkYzAxNzVjODU4MTE5MDRlMjJjNTcxNjBhMjkwMjgwZGFjMDMzM2I2ZmJhMTE3YTI4YjdhMDM5Y2U1OTg0YzcifQ.eyJpc3MiOiJodHRwczpcL1wvcHRlcm9kYWN0eWwuZmlsZS5wcm9wZXJ0aWVzIiwiYXVkIjoiaHR0cHM6XC9cL3B0ZXJvZGFjdHlsLmZpbGUucHJvcGVydGllczo4MDgwIiwianRpIjoiN2RjMDE3NWM4NTgxMTkwNGUyMmM1NzE2MGEyOTAyODBkYWMwMzMzYjZmYmExMTdhMjhiN2EwMzljZTU5ODRjNyIsImlhdCI6MTU5NDY0ODEwMCwibmJmIjoxNTk0NjQ3ODAwLCJleHAiOjE1OTQ2NDkwMDAsImZpbGVfcGF0aCI6IlwvZXVsYS50eHQiLCJzZXJ2ZXJfdXVpZCI6IjFhN2NlOTk3LTI1OWItNDUyZS04YjRlLWNlY2M0NjQxNDJjYSIsInVuaXF1ZV9pZCI6IlNvWUdIamNaNmhKUVlieHUifQ.h4eBmxDXf-4GAwVuAWZFU5QTqd62jw7HTre4aKQGpvw\"   } } <!-- ENDRESPONSE -->  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.client_serversserver_id_files_download_get(accept, content_type, server_id, async_req=True)
        >>> result = thread.get()

        Args:
            accept (str): 
            content_type (str): 
            server_id (str): 

        Keyword Args:
            file (str): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            bool, date, datetime, dict, float, int, list, str, none_type
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['accept'] = \
            accept
        kwargs['content_type'] = \
            content_type
        kwargs['server_id'] = \
            server_id
        return self.client_serversserver_id_files_download_get_endpoint.call_with_http_info(**kwargs)

    def client_serversserver_id_files_list_get(
        self,
        accept,
        content_type,
        server_id,
        **kwargs
    ):
        """[ /list ] List files  # noqa: E501

        Lists all files of the server  ## Available parameters | Parameter | Description                         | |-----------|-------------------------------------| | directory | URL encoded path to list files from |  <!-- RESPONSE 200 --> {   \"object\": \"list\",   \"data\": [     {       \"object\": \"file_object\",       \"attributes\": {         \"name\": \"cache\",         \"mode\": \"drwxr-xr-x\",         \"size\": 4096,         \"is_file\": false,         \"is_symlink\": false,         \"is_editable\": false,         \"mimetype\": \"inode/directory\",         \"created_at\": \"2020-07-13T12:41:55+00:00\",         \"modified_at\": \"2019-12-25T05:20:36+00:00\"       }     },     {       \"object\": \"file_object\",       \"attributes\": {         \"name\": \"logs\",         \"mode\": \"drwxr-xr-x\",         \"size\": 4096,         \"is_file\": false,         \"is_symlink\": false,         \"is_editable\": false,         \"mimetype\": \"inode/directory\",         \"created_at\": \"2020-07-13T12:42:02+00:00\",         \"modified_at\": \"2020-07-13T12:42:02+00:00\"       }     },     {       \"object\": \"file_object\",       \"attributes\": {         \"name\": \"plugins\",         \"mode\": \"drwxr-xr-x\",         \"size\": 4096,         \"is_file\": false,         \"is_symlink\": false,         \"is_editable\": false,         \"mimetype\": \"inode/directory\",         \"created_at\": \"2020-07-13T12:41:55+00:00\",         \"modified_at\": \"2019-12-25T05:21:07+00:00\"       }     },     {       \"object\": \"file_object\",       \"attributes\": {         \"name\": \"world\",         \"mode\": \"drwxr-xr-x\",         \"size\": 4096,         \"is_file\": false,         \"is_symlink\": false,         \"is_editable\": false,         \"mimetype\": \"inode/directory\",         \"created_at\": \"2020-07-13T13:26:22+00:00\",         \"modified_at\": \"2020-07-13T13:26:22+00:00\"       }     },     {       \"object\": \"file_object\",       \"attributes\": {         \"name\": \"world_nether\",         \"mode\": \"drwxr-xr-x\",         \"size\": 4096,         \"is_file\": false,         \"is_symlink\": false,         \"is_editable\": false,         \"mimetype\": \"inode/directory\",         \"created_at\": \"2020-07-13T12:41:55+00:00\",         \"modified_at\": \"2019-12-25T05:21:15+00:00\"       }     },     {       \"object\": \"file_object\",       \"attributes\": {         \"name\": \"world_the_end\",         \"mode\": \"drwxr-xr-x\",         \"size\": 4096,         \"is_file\": false,         \"is_symlink\": false,         \"is_editable\": false,         \"mimetype\": \"inode/directory\",         \"created_at\": \"2020-07-13T12:41:55+00:00\",         \"modified_at\": \"2019-12-25T05:21:15+00:00\"       }     },     {       \"object\": \"file_object\",       \"attributes\": {         \"name\": \"whitelist.json\",         \"mode\": \"-rw-r--r--\",         \"size\": 2,         \"is_file\": true,         \"is_symlink\": false,         \"is_editable\": true,         \"mimetype\": \"application/json\",         \"created_at\": \"2020-07-13T12:41:55+00:00\",         \"modified_at\": \"2019-12-25T05:21:07+00:00\"       }     },     {       \"object\": \"file_object\",       \"attributes\": {         \"name\": \"version_history.json\",         \"mode\": \"-rw-r--r--\",         \"size\": 46,         \"is_file\": true,         \"is_symlink\": false,         \"is_editable\": true,         \"mimetype\": \"application/json\",         \"created_at\": \"2020-07-13T12:41:55+00:00\",         \"modified_at\": \"2019-12-25T05:21:08+00:00\"       }     },     {       \"object\": \"file_object\",       \"attributes\": {         \"name\": \"usercache.json\",         \"mode\": \"-rw-r--r--\",         \"size\": 2,         \"is_file\": true,         \"is_symlink\": false,         \"is_editable\": true,         \"mimetype\": \"application/json\",         \"created_at\": \"2020-07-13T12:42:03+00:00\",         \"modified_at\": \"2020-07-13T12:42:03+00:00\"       }     },     {       \"object\": \"file_object\",       \"attributes\": {         \"name\": \"spigot.yml\",         \"mode\": \"-rw-r--r--\",         \"size\": 3567,         \"is_file\": true,         \"is_symlink\": false,         \"is_editable\": true,         \"mimetype\": \"text/plain\",         \"created_at\": \"2020-07-13T12:41:55+00:00\",         \"modified_at\": \"2020-06-12T21:44:42+00:00\"       }     },     {       \"object\": \"file_object\",       \"attributes\": {         \"name\": \"server.properties\",         \"mode\": \"-rw-r--r--\",         \"size\": 955,         \"is_file\": true,         \"is_symlink\": false,         \"is_editable\": true,         \"mimetype\": \"text/plain\",         \"created_at\": \"2020-07-13T12:41:59+00:00\",         \"modified_at\": \"2020-07-13T12:41:59+00:00\"       }     },     {       \"object\": \"file_object\",       \"attributes\": {         \"name\": \"server.jar\",         \"mode\": \"-rw-r--r--\",         \"size\": 36175593,         \"is_file\": true,         \"is_symlink\": false,         \"is_editable\": false,         \"mimetype\": \"application/jar\",         \"created_at\": \"2020-07-13T12:41:55+00:00\",         \"modified_at\": \"2020-06-12T22:38:46+00:00\"       }     },     {       \"object\": \"file_object\",       \"attributes\": {         \"name\": \"permissions.yml\",         \"mode\": \"-rw-r--r--\",         \"size\": 0,         \"is_file\": true,         \"is_symlink\": false,         \"is_editable\": true,         \"mimetype\": \"inode/x-empty\",         \"created_at\": \"2020-07-13T12:41:55+00:00\",         \"modified_at\": \"2019-12-25T05:21:08+00:00\"       }     },     {       \"object\": \"file_object\",       \"attributes\": {         \"name\": \"paper.yml\",         \"mode\": \"-rw-r--r--\",         \"size\": 5310,         \"is_file\": true,         \"is_symlink\": false,         \"is_editable\": true,         \"mimetype\": \"text/plain\",         \"created_at\": \"2020-07-13T12:41:55+00:00\",         \"modified_at\": \"2020-06-12T21:44:42+00:00\"       }     },     {       \"object\": \"file_object\",       \"attributes\": {         \"name\": \"ops.json\",         \"mode\": \"-rw-r--r--\",         \"size\": 2,         \"is_file\": true,         \"is_symlink\": false,         \"is_editable\": true,         \"mimetype\": \"application/json\",         \"created_at\": \"2020-07-13T12:42:03+00:00\",         \"modified_at\": \"2020-07-13T12:42:03+00:00\"       }     },     {       \"object\": \"file_object\",       \"attributes\": {         \"name\": \"hs_err_pid25.log\",         \"mode\": \"-rw-r--r--\",         \"size\": 57099,         \"is_file\": true,         \"is_symlink\": false,         \"is_editable\": true,         \"mimetype\": \"text/plain\",         \"created_at\": \"2020-07-13T12:41:55+00:00\",         \"modified_at\": \"2020-06-12T20:36:55+00:00\"       }     },     {       \"object\": \"file_object\",       \"attributes\": {         \"name\": \"help.yml\",         \"mode\": \"-rw-r--r--\",         \"size\": 2576,         \"is_file\": true,         \"is_symlink\": false,         \"is_editable\": true,         \"mimetype\": \"text/plain\",         \"created_at\": \"2020-07-13T12:41:55+00:00\",         \"modified_at\": \"2019-12-25T05:21:07+00:00\"       }     },     {       \"object\": \"file_object\",       \"attributes\": {         \"name\": \"eula.txt\",         \"mode\": \"-rw-r--r--\",         \"size\": 250,         \"is_file\": true,         \"is_symlink\": false,         \"is_editable\": true,         \"mimetype\": \"text/plain\",         \"created_at\": \"2020-07-13T12:41:55+00:00\",         \"modified_at\": \"2019-12-25T05:20:57+00:00\"       }     },     {       \"object\": \"file_object\",       \"attributes\": {         \"name\": \"commands.yml\",         \"mode\": \"-rw-r--r--\",         \"size\": 598,         \"is_file\": true,         \"is_symlink\": false,         \"is_editable\": true,         \"mimetype\": \"text/plain\",         \"created_at\": \"2020-07-13T12:41:55+00:00\",         \"modified_at\": \"2020-06-12T21:44:36+00:00\"       }     },     {       \"object\": \"file_object\",       \"attributes\": {         \"name\": \"bukkit.yml\",         \"mode\": \"-rw-r--r--\",         \"size\": 1053,         \"is_file\": true,         \"is_symlink\": false,         \"is_editable\": true,         \"mimetype\": \"text/plain\",         \"created_at\": \"2020-07-13T12:41:55+00:00\",         \"modified_at\": \"2020-06-12T21:44:36+00:00\"       }     },     {       \"object\": \"file_object\",       \"attributes\": {         \"name\": \"banned-players.json\",         \"mode\": \"-rw-r--r--\",         \"size\": 2,         \"is_file\": true,         \"is_symlink\": false,         \"is_editable\": true,         \"mimetype\": \"application/json\",         \"created_at\": \"2020-07-13T12:42:03+00:00\",         \"modified_at\": \"2020-07-13T12:42:03+00:00\"       }     },     {       \"object\": \"file_object\",       \"attributes\": {         \"name\": \"banned-ips.json\",         \"mode\": \"-rw-r--r--\",         \"size\": 2,         \"is_file\": true,         \"is_symlink\": false,         \"is_editable\": true,         \"mimetype\": \"application/json\",         \"created_at\": \"2020-07-13T12:42:03+00:00\",         \"modified_at\": \"2020-07-13T12:42:03+00:00\"       }     }   ] } <!-- ENDRESPONSE -->  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.client_serversserver_id_files_list_get(accept, content_type, server_id, async_req=True)
        >>> result = thread.get()

        Args:
            accept (str): 
            content_type (str): 
            server_id (str): 

        Keyword Args:
            directory (str): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            bool, date, datetime, dict, float, int, list, str, none_type
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['accept'] = \
            accept
        kwargs['content_type'] = \
            content_type
        kwargs['server_id'] = \
            server_id
        return self.client_serversserver_id_files_list_get_endpoint.call_with_http_info(**kwargs)

    def client_serversserver_id_files_rename_put(
        self,
        accept,
        server_id,
        client_servers_server_id_files_rename_put_request,
        **kwargs
    ):
        """[ /rename ] Rename file  # noqa: E501

        Renames the specified file(s) or folder(s)  <!-- RESPONSE 204 --> // Successful <!-- ENDRESPONSE -->  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.client_serversserver_id_files_rename_put(accept, server_id, client_servers_server_id_files_rename_put_request, async_req=True)
        >>> result = thread.get()

        Args:
            accept (str): 
            server_id (str): 
            client_servers_server_id_files_rename_put_request (ClientServersServerIdFilesRenamePutRequest): 

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            bool, date, datetime, dict, float, int, list, str, none_type
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['accept'] = \
            accept
        kwargs['server_id'] = \
            server_id
        kwargs['client_servers_server_id_files_rename_put_request'] = \
            client_servers_server_id_files_rename_put_request
        return self.client_serversserver_id_files_rename_put_endpoint.call_with_http_info(**kwargs)

    def client_serversserver_id_files_upload_get(
        self,
        accept,
        content_type,
        server_id,
        **kwargs
    ):
        """[ /upload ] Upload file  # noqa: E501

        Returns a signed URL used to upload files to the server using POST  <!-- RESPONSE 200 --> {   \"object\": \"signed_url\",   \"attributes\": {     \"url\": \"https://pterodactyl.file.properties:8080/upload/file?token=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiIsImp0aSI6IjdkYzAxNzVjODU4MTE5MDRlMjJjNTcxNjBhMjkwMjgwZGFjMDMzM2I2ZmJhMTE3YTI4YjdhMDM5Y2U1OTg0YzcifQ.eyJpc3MiOiJodHRwczpcL1wvcHRlcm9kYWN0eWwuZmlsZS5wcm9wZXJ0aWVzIiwiYXVkIjoiaHR0cHM6XC9cL3B0ZXJvZGFjdHlsLmZpbGUucHJvcGVydGllczo4MDgwIiwianRpIjoiN2RjMDE3NWM4NTgxMTkwNGUyMmM1NzE2MGEyOTAyODBkYWMwMzMzYjZmYmExMTdhMjhiN2EwMzljZTU5ODRjNyIsImlhdCI6MTU5ODIyMTMyMSwibmJmIjoxNTk4MjIxMDIxLCJleHAiOjE1OTgyMjIyMjEsInNlcnZlcl91dWlkIjoiMWE3Y2U5OTctMjU5Yi00NTJlLThiNGUtY2VjYzQ2NDE0MmNhIiwidW5pcXVlX2lkIjoiNmM2OFdkSkJTVzg0RlBsUiJ9.GJ5681K9ehhPCcXevyxw-RO1jhv4UWg5T8b_P7r6s8Q\"   } } <!-- ENDRESPONSE -->  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.client_serversserver_id_files_upload_get(accept, content_type, server_id, async_req=True)
        >>> result = thread.get()

        Args:
            accept (str): 
            content_type (str): 
            server_id (str): 

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            bool, date, datetime, dict, float, int, list, str, none_type
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['accept'] = \
            accept
        kwargs['content_type'] = \
            content_type
        kwargs['server_id'] = \
            server_id
        return self.client_serversserver_id_files_upload_get_endpoint.call_with_http_info(**kwargs)

    def client_serversserver_id_files_write_post(
        self,
        accept,
        server_id,
        body,
        **kwargs
    ):
        """[ /write ] Write file  # noqa: E501

        Writes data to the specified file  ## Available parameters | Parameter | Description                          | |-----------|--------------------------------------| | file      | URL encoded path to the desired file |  <!-- RESPONSE 204 --> // Successful <!-- ENDRESPONSE -->  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.client_serversserver_id_files_write_post(accept, server_id, body, async_req=True)
        >>> result = thread.get()

        Args:
            accept (str): 
            server_id (str): 
            body (str): 

        Keyword Args:
            file (str): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            bool, date, datetime, dict, float, int, list, str, none_type
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['accept'] = \
            accept
        kwargs['server_id'] = \
            server_id
        kwargs['body'] = \
            body
        return self.client_serversserver_id_files_write_post_endpoint.call_with_http_info(**kwargs)

